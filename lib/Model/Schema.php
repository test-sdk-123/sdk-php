<?php
/**
 * Schema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Example.com
 *
 * This is an **example** API to demonstrate features of the OpenAPI specification. # Introduction This API definition is intended to to be a good starting point for describing your API in [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md). It also demonstrates features of the [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond the standard OpenAPI syntax, we use a few  [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md). # OpenAPI Specification The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@example.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Schema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Schema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'string_property' => 'string',
        'read_only_string_property' => 'string',
        'write_only_string_property' => 'string',
        'min_length_string' => 'string',
        'max_length_string' => 'string',
        'min_and_max_length_string' => 'string',
        'nullable_or_string_property' => 'string',
        'string_enum_values' => 'string',
        'string_date_time' => '\DateTime',
        'string_date' => '\DateTime',
        'string_email' => 'string',
        'string_ip_address_v4' => 'string',
        'string_ip_address_v6' => 'string',
        'string_password' => 'string',
        'string_hostname' => 'string',
        'string_uri' => 'string',
        'string_uuid' => 'string',
        'number_property' => 'float',
        'number_float' => 'float',
        'number_double' => 'float',
        'number_greater_than_or_equals' => 'float',
        'number_greater_than' => 'float',
        'number_less_than' => 'float',
        'number_less_than_or_equals' => 'float',
        'number_range' => 'float',
        'number_range_exclusive_maximum' => 'float',
        'number_range_exclusive_minimum_and_maximum' => 'float',
        'number_multiple_of' => 'float',
        'integer_type' => 'int',
        'integer32bit' => 'int',
        'integer64bit' => 'int',
        'boolean_property' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'string_property' => null,
        'read_only_string_property' => null,
        'write_only_string_property' => null,
        'min_length_string' => null,
        'max_length_string' => null,
        'min_and_max_length_string' => null,
        'nullable_or_string_property' => null,
        'string_enum_values' => null,
        'string_date_time' => 'date-time',
        'string_date' => 'date',
        'string_email' => 'email',
        'string_ip_address_v4' => 'ipv4',
        'string_ip_address_v6' => 'ipv6',
        'string_password' => 'password',
        'string_hostname' => 'hostname',
        'string_uri' => 'uri',
        'string_uuid' => 'uuid',
        'number_property' => null,
        'number_float' => 'float',
        'number_double' => 'double',
        'number_greater_than_or_equals' => null,
        'number_greater_than' => null,
        'number_less_than' => null,
        'number_less_than_or_equals' => null,
        'number_range' => null,
        'number_range_exclusive_maximum' => null,
        'number_range_exclusive_minimum_and_maximum' => null,
        'number_multiple_of' => null,
        'integer_type' => null,
        'integer32bit' => 'int32',
        'integer64bit' => 'int64',
        'boolean_property' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'string_property' => false,
        'read_only_string_property' => false,
        'write_only_string_property' => false,
        'min_length_string' => false,
        'max_length_string' => false,
        'min_and_max_length_string' => false,
        'nullable_or_string_property' => true,
        'string_enum_values' => false,
        'string_date_time' => false,
        'string_date' => false,
        'string_email' => false,
        'string_ip_address_v4' => false,
        'string_ip_address_v6' => false,
        'string_password' => false,
        'string_hostname' => false,
        'string_uri' => false,
        'string_uuid' => false,
        'number_property' => false,
        'number_float' => false,
        'number_double' => false,
        'number_greater_than_or_equals' => false,
        'number_greater_than' => false,
        'number_less_than' => false,
        'number_less_than_or_equals' => false,
        'number_range' => false,
        'number_range_exclusive_maximum' => false,
        'number_range_exclusive_minimum_and_maximum' => false,
        'number_multiple_of' => false,
        'integer_type' => false,
        'integer32bit' => false,
        'integer64bit' => false,
        'boolean_property' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'string_property' => 'stringProperty',
        'read_only_string_property' => 'readOnlyStringProperty',
        'write_only_string_property' => 'writeOnlyStringProperty',
        'min_length_string' => 'minLengthString',
        'max_length_string' => 'maxLengthString',
        'min_and_max_length_string' => 'minAndMaxLengthString',
        'nullable_or_string_property' => 'nullableOrStringProperty',
        'string_enum_values' => 'stringEnumValues',
        'string_date_time' => 'stringDateTime',
        'string_date' => 'stringDate',
        'string_email' => 'stringEmail',
        'string_ip_address_v4' => 'stringIpAddressV4',
        'string_ip_address_v6' => 'stringIpAddressV6',
        'string_password' => 'stringPassword',
        'string_hostname' => 'stringHostname',
        'string_uri' => 'stringUri',
        'string_uuid' => 'stringUuid',
        'number_property' => 'numberProperty',
        'number_float' => 'numberFloat',
        'number_double' => 'numberDouble',
        'number_greater_than_or_equals' => 'numberGreaterThanOrEquals',
        'number_greater_than' => 'numberGreaterThan',
        'number_less_than' => 'numberLessThan',
        'number_less_than_or_equals' => 'numberLessThanOrEquals',
        'number_range' => 'numberRange',
        'number_range_exclusive_maximum' => 'numberRangeExclusiveMaximum',
        'number_range_exclusive_minimum_and_maximum' => 'numberRangeExclusiveMinimumAndMaximum',
        'number_multiple_of' => 'numberMultipleOf',
        'integer_type' => 'integerType',
        'integer32bit' => 'integer32bit',
        'integer64bit' => 'integer64bit',
        'boolean_property' => 'booleanProperty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'string_property' => 'setStringProperty',
        'read_only_string_property' => 'setReadOnlyStringProperty',
        'write_only_string_property' => 'setWriteOnlyStringProperty',
        'min_length_string' => 'setMinLengthString',
        'max_length_string' => 'setMaxLengthString',
        'min_and_max_length_string' => 'setMinAndMaxLengthString',
        'nullable_or_string_property' => 'setNullableOrStringProperty',
        'string_enum_values' => 'setStringEnumValues',
        'string_date_time' => 'setStringDateTime',
        'string_date' => 'setStringDate',
        'string_email' => 'setStringEmail',
        'string_ip_address_v4' => 'setStringIpAddressV4',
        'string_ip_address_v6' => 'setStringIpAddressV6',
        'string_password' => 'setStringPassword',
        'string_hostname' => 'setStringHostname',
        'string_uri' => 'setStringUri',
        'string_uuid' => 'setStringUuid',
        'number_property' => 'setNumberProperty',
        'number_float' => 'setNumberFloat',
        'number_double' => 'setNumberDouble',
        'number_greater_than_or_equals' => 'setNumberGreaterThanOrEquals',
        'number_greater_than' => 'setNumberGreaterThan',
        'number_less_than' => 'setNumberLessThan',
        'number_less_than_or_equals' => 'setNumberLessThanOrEquals',
        'number_range' => 'setNumberRange',
        'number_range_exclusive_maximum' => 'setNumberRangeExclusiveMaximum',
        'number_range_exclusive_minimum_and_maximum' => 'setNumberRangeExclusiveMinimumAndMaximum',
        'number_multiple_of' => 'setNumberMultipleOf',
        'integer_type' => 'setIntegerType',
        'integer32bit' => 'setInteger32bit',
        'integer64bit' => 'setInteger64bit',
        'boolean_property' => 'setBooleanProperty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'string_property' => 'getStringProperty',
        'read_only_string_property' => 'getReadOnlyStringProperty',
        'write_only_string_property' => 'getWriteOnlyStringProperty',
        'min_length_string' => 'getMinLengthString',
        'max_length_string' => 'getMaxLengthString',
        'min_and_max_length_string' => 'getMinAndMaxLengthString',
        'nullable_or_string_property' => 'getNullableOrStringProperty',
        'string_enum_values' => 'getStringEnumValues',
        'string_date_time' => 'getStringDateTime',
        'string_date' => 'getStringDate',
        'string_email' => 'getStringEmail',
        'string_ip_address_v4' => 'getStringIpAddressV4',
        'string_ip_address_v6' => 'getStringIpAddressV6',
        'string_password' => 'getStringPassword',
        'string_hostname' => 'getStringHostname',
        'string_uri' => 'getStringUri',
        'string_uuid' => 'getStringUuid',
        'number_property' => 'getNumberProperty',
        'number_float' => 'getNumberFloat',
        'number_double' => 'getNumberDouble',
        'number_greater_than_or_equals' => 'getNumberGreaterThanOrEquals',
        'number_greater_than' => 'getNumberGreaterThan',
        'number_less_than' => 'getNumberLessThan',
        'number_less_than_or_equals' => 'getNumberLessThanOrEquals',
        'number_range' => 'getNumberRange',
        'number_range_exclusive_maximum' => 'getNumberRangeExclusiveMaximum',
        'number_range_exclusive_minimum_and_maximum' => 'getNumberRangeExclusiveMinimumAndMaximum',
        'number_multiple_of' => 'getNumberMultipleOf',
        'integer_type' => 'getIntegerType',
        'integer32bit' => 'getInteger32bit',
        'integer64bit' => 'getInteger64bit',
        'boolean_property' => 'getBooleanProperty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STRING_ENUM_VALUES_SAMPLE = 'sample';
    public const STRING_ENUM_VALUES_EXAMPLE = 'example';
    public const STRING_ENUM_VALUES_SPECIMEN = 'specimen';
    public const STRING_ENUM_VALUES__CASE = 'case';
    public const STRING_ENUM_VALUES_INSTANCE = 'instance';
    public const STRING_ENUM_VALUES_ILLUSTRATION = 'illustration';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStringEnumValuesAllowableValues()
    {
        return [
            self::STRING_ENUM_VALUES_SAMPLE,
            self::STRING_ENUM_VALUES_EXAMPLE,
            self::STRING_ENUM_VALUES_SPECIMEN,
            self::STRING_ENUM_VALUES__CASE,
            self::STRING_ENUM_VALUES_INSTANCE,
            self::STRING_ENUM_VALUES_ILLUSTRATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('string_property', $data ?? [], null);
        $this->setIfExists('read_only_string_property', $data ?? [], null);
        $this->setIfExists('write_only_string_property', $data ?? [], null);
        $this->setIfExists('min_length_string', $data ?? [], null);
        $this->setIfExists('max_length_string', $data ?? [], null);
        $this->setIfExists('min_and_max_length_string', $data ?? [], null);
        $this->setIfExists('nullable_or_string_property', $data ?? [], null);
        $this->setIfExists('string_enum_values', $data ?? [], null);
        $this->setIfExists('string_date_time', $data ?? [], null);
        $this->setIfExists('string_date', $data ?? [], null);
        $this->setIfExists('string_email', $data ?? [], null);
        $this->setIfExists('string_ip_address_v4', $data ?? [], null);
        $this->setIfExists('string_ip_address_v6', $data ?? [], null);
        $this->setIfExists('string_password', $data ?? [], null);
        $this->setIfExists('string_hostname', $data ?? [], null);
        $this->setIfExists('string_uri', $data ?? [], null);
        $this->setIfExists('string_uuid', $data ?? [], null);
        $this->setIfExists('number_property', $data ?? [], null);
        $this->setIfExists('number_float', $data ?? [], null);
        $this->setIfExists('number_double', $data ?? [], null);
        $this->setIfExists('number_greater_than_or_equals', $data ?? [], null);
        $this->setIfExists('number_greater_than', $data ?? [], null);
        $this->setIfExists('number_less_than', $data ?? [], null);
        $this->setIfExists('number_less_than_or_equals', $data ?? [], null);
        $this->setIfExists('number_range', $data ?? [], null);
        $this->setIfExists('number_range_exclusive_maximum', $data ?? [], null);
        $this->setIfExists('number_range_exclusive_minimum_and_maximum', $data ?? [], null);
        $this->setIfExists('number_multiple_of', $data ?? [], null);
        $this->setIfExists('integer_type', $data ?? [], null);
        $this->setIfExists('integer32bit', $data ?? [], null);
        $this->setIfExists('integer64bit', $data ?? [], null);
        $this->setIfExists('boolean_property', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['min_length_string']) && (mb_strlen($this->container['min_length_string']) < 4)) {
            $invalidProperties[] = "invalid value for 'min_length_string', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['max_length_string']) && (mb_strlen($this->container['max_length_string']) > 140)) {
            $invalidProperties[] = "invalid value for 'max_length_string', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['min_and_max_length_string']) && (mb_strlen($this->container['min_and_max_length_string']) > 140)) {
            $invalidProperties[] = "invalid value for 'min_and_max_length_string', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['min_and_max_length_string']) && (mb_strlen($this->container['min_and_max_length_string']) < 4)) {
            $invalidProperties[] = "invalid value for 'min_and_max_length_string', the character length must be bigger than or equal to 4.";
        }

        $allowedValues = $this->getStringEnumValuesAllowableValues();
        if (!is_null($this->container['string_enum_values']) && !in_array($this->container['string_enum_values'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'string_enum_values', must be one of '%s'",
                $this->container['string_enum_values'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['number_greater_than_or_equals']) && ($this->container['number_greater_than_or_equals'] < 5)) {
            $invalidProperties[] = "invalid value for 'number_greater_than_or_equals', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['number_less_than_or_equals']) && ($this->container['number_less_than_or_equals'] > 8)) {
            $invalidProperties[] = "invalid value for 'number_less_than_or_equals', must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['number_range']) && ($this->container['number_range'] > 8)) {
            $invalidProperties[] = "invalid value for 'number_range', must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['number_range']) && ($this->container['number_range'] < 5)) {
            $invalidProperties[] = "invalid value for 'number_range', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['number_range_exclusive_maximum']) && ($this->container['number_range_exclusive_maximum'] < 5)) {
            $invalidProperties[] = "invalid value for 'number_range_exclusive_maximum', must be bigger than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets string_property
     *
     * @return string|null
     */
    public function getStringProperty()
    {
        return $this->container['string_property'];
    }

    /**
     * Sets string_property
     *
     * @param string|null $string_property Property name's description (type is string)
     *
     * @return self
     */
    public function setStringProperty($string_property)
    {
        if (is_null($string_property)) {
            throw new \InvalidArgumentException('non-nullable string_property cannot be null');
        }
        $this->container['string_property'] = $string_property;

        return $this;
    }

    /**
     * Gets read_only_string_property
     *
     * @return string|null
     */
    public function getReadOnlyStringProperty()
    {
        return $this->container['read_only_string_property'];
    }

    /**
     * Sets read_only_string_property
     *
     * @param string|null $read_only_string_property Notice this only appears in the response.
     *
     * @return self
     */
    public function setReadOnlyStringProperty($read_only_string_property)
    {
        if (is_null($read_only_string_property)) {
            throw new \InvalidArgumentException('non-nullable read_only_string_property cannot be null');
        }
        $this->container['read_only_string_property'] = $read_only_string_property;

        return $this;
    }

    /**
     * Gets write_only_string_property
     *
     * @return string|null
     */
    public function getWriteOnlyStringProperty()
    {
        return $this->container['write_only_string_property'];
    }

    /**
     * Sets write_only_string_property
     *
     * @param string|null $write_only_string_property Notice this only appears in the request.
     *
     * @return self
     */
    public function setWriteOnlyStringProperty($write_only_string_property)
    {
        if (is_null($write_only_string_property)) {
            throw new \InvalidArgumentException('non-nullable write_only_string_property cannot be null');
        }
        $this->container['write_only_string_property'] = $write_only_string_property;

        return $this;
    }

    /**
     * Gets min_length_string
     *
     * @return string|null
     */
    public function getMinLengthString()
    {
        return $this->container['min_length_string'];
    }

    /**
     * Sets min_length_string
     *
     * @param string|null $min_length_string Property name's description (type is string)
     *
     * @return self
     */
    public function setMinLengthString($min_length_string)
    {
        if (is_null($min_length_string)) {
            throw new \InvalidArgumentException('non-nullable min_length_string cannot be null');
        }

        if ((mb_strlen($min_length_string) < 4)) {
            throw new \InvalidArgumentException('invalid length for $min_length_string when calling Schema., must be bigger than or equal to 4.');
        }

        $this->container['min_length_string'] = $min_length_string;

        return $this;
    }

    /**
     * Gets max_length_string
     *
     * @return string|null
     */
    public function getMaxLengthString()
    {
        return $this->container['max_length_string'];
    }

    /**
     * Sets max_length_string
     *
     * @param string|null $max_length_string Property name's description (type is string)
     *
     * @return self
     */
    public function setMaxLengthString($max_length_string)
    {
        if (is_null($max_length_string)) {
            throw new \InvalidArgumentException('non-nullable max_length_string cannot be null');
        }
        if ((mb_strlen($max_length_string) > 140)) {
            throw new \InvalidArgumentException('invalid length for $max_length_string when calling Schema., must be smaller than or equal to 140.');
        }

        $this->container['max_length_string'] = $max_length_string;

        return $this;
    }

    /**
     * Gets min_and_max_length_string
     *
     * @return string|null
     */
    public function getMinAndMaxLengthString()
    {
        return $this->container['min_and_max_length_string'];
    }

    /**
     * Sets min_and_max_length_string
     *
     * @param string|null $min_and_max_length_string Property name's description (type is string)
     *
     * @return self
     */
    public function setMinAndMaxLengthString($min_and_max_length_string)
    {
        if (is_null($min_and_max_length_string)) {
            throw new \InvalidArgumentException('non-nullable min_and_max_length_string cannot be null');
        }
        if ((mb_strlen($min_and_max_length_string) > 140)) {
            throw new \InvalidArgumentException('invalid length for $min_and_max_length_string when calling Schema., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($min_and_max_length_string) < 4)) {
            throw new \InvalidArgumentException('invalid length for $min_and_max_length_string when calling Schema., must be bigger than or equal to 4.');
        }

        $this->container['min_and_max_length_string'] = $min_and_max_length_string;

        return $this;
    }

    /**
     * Gets nullable_or_string_property
     *
     * @return string|null
     */
    public function getNullableOrStringProperty()
    {
        return $this->container['nullable_or_string_property'];
    }

    /**
     * Sets nullable_or_string_property
     *
     * @param string|null $nullable_or_string_property Property name's description (type is string or null)
     *
     * @return self
     */
    public function setNullableOrStringProperty($nullable_or_string_property)
    {
        if (is_null($nullable_or_string_property)) {
            array_push($this->openAPINullablesSetToNull, 'nullable_or_string_property');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nullable_or_string_property', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nullable_or_string_property'] = $nullable_or_string_property;

        return $this;
    }

    /**
     * Gets string_enum_values
     *
     * @return string|null
     */
    public function getStringEnumValues()
    {
        return $this->container['string_enum_values'];
    }

    /**
     * Sets string_enum_values
     *
     * @param string|null $string_enum_values Property name's description (type is string)
     *
     * @return self
     */
    public function setStringEnumValues($string_enum_values)
    {
        if (is_null($string_enum_values)) {
            throw new \InvalidArgumentException('non-nullable string_enum_values cannot be null');
        }
        $allowedValues = $this->getStringEnumValuesAllowableValues();
        if (!in_array($string_enum_values, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'string_enum_values', must be one of '%s'",
                    $string_enum_values,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['string_enum_values'] = $string_enum_values;

        return $this;
    }

    /**
     * Gets string_date_time
     *
     * @return \DateTime|null
     */
    public function getStringDateTime()
    {
        return $this->container['string_date_time'];
    }

    /**
     * Sets string_date_time
     *
     * @param \DateTime|null $string_date_time Property name's description (type is string, format is date-time)
     *
     * @return self
     */
    public function setStringDateTime($string_date_time)
    {
        if (is_null($string_date_time)) {
            throw new \InvalidArgumentException('non-nullable string_date_time cannot be null');
        }
        $this->container['string_date_time'] = $string_date_time;

        return $this;
    }

    /**
     * Gets string_date
     *
     * @return \DateTime|null
     */
    public function getStringDate()
    {
        return $this->container['string_date'];
    }

    /**
     * Sets string_date
     *
     * @param \DateTime|null $string_date Property name's description (type is string, format is date-time)
     *
     * @return self
     */
    public function setStringDate($string_date)
    {
        if (is_null($string_date)) {
            throw new \InvalidArgumentException('non-nullable string_date cannot be null');
        }
        $this->container['string_date'] = $string_date;

        return $this;
    }

    /**
     * Gets string_email
     *
     * @return string|null
     */
    public function getStringEmail()
    {
        return $this->container['string_email'];
    }

    /**
     * Sets string_email
     *
     * @param string|null $string_email Property name's description (type is string, format is email)
     *
     * @return self
     */
    public function setStringEmail($string_email)
    {
        if (is_null($string_email)) {
            throw new \InvalidArgumentException('non-nullable string_email cannot be null');
        }
        $this->container['string_email'] = $string_email;

        return $this;
    }

    /**
     * Gets string_ip_address_v4
     *
     * @return string|null
     */
    public function getStringIpAddressV4()
    {
        return $this->container['string_ip_address_v4'];
    }

    /**
     * Sets string_ip_address_v4
     *
     * @param string|null $string_ip_address_v4 Property name's description (type is string, format is ipv4 address)
     *
     * @return self
     */
    public function setStringIpAddressV4($string_ip_address_v4)
    {
        if (is_null($string_ip_address_v4)) {
            throw new \InvalidArgumentException('non-nullable string_ip_address_v4 cannot be null');
        }
        $this->container['string_ip_address_v4'] = $string_ip_address_v4;

        return $this;
    }

    /**
     * Gets string_ip_address_v6
     *
     * @return string|null
     */
    public function getStringIpAddressV6()
    {
        return $this->container['string_ip_address_v6'];
    }

    /**
     * Sets string_ip_address_v6
     *
     * @param string|null $string_ip_address_v6 Property name's description (type is string, format is ipv6 address)
     *
     * @return self
     */
    public function setStringIpAddressV6($string_ip_address_v6)
    {
        if (is_null($string_ip_address_v6)) {
            throw new \InvalidArgumentException('non-nullable string_ip_address_v6 cannot be null');
        }
        $this->container['string_ip_address_v6'] = $string_ip_address_v6;

        return $this;
    }

    /**
     * Gets string_password
     *
     * @return string|null
     */
    public function getStringPassword()
    {
        return $this->container['string_password'];
    }

    /**
     * Sets string_password
     *
     * @param string|null $string_password Property name's description (type is string, format is password)
     *
     * @return self
     */
    public function setStringPassword($string_password)
    {
        if (is_null($string_password)) {
            throw new \InvalidArgumentException('non-nullable string_password cannot be null');
        }
        $this->container['string_password'] = $string_password;

        return $this;
    }

    /**
     * Gets string_hostname
     *
     * @return string|null
     */
    public function getStringHostname()
    {
        return $this->container['string_hostname'];
    }

    /**
     * Sets string_hostname
     *
     * @param string|null $string_hostname Property name's description (type is string, format is hostname)
     *
     * @return self
     */
    public function setStringHostname($string_hostname)
    {
        if (is_null($string_hostname)) {
            throw new \InvalidArgumentException('non-nullable string_hostname cannot be null');
        }
        $this->container['string_hostname'] = $string_hostname;

        return $this;
    }

    /**
     * Gets string_uri
     *
     * @return string|null
     */
    public function getStringUri()
    {
        return $this->container['string_uri'];
    }

    /**
     * Sets string_uri
     *
     * @param string|null $string_uri Property name's description (type is string, format is uri)
     *
     * @return self
     */
    public function setStringUri($string_uri)
    {
        if (is_null($string_uri)) {
            throw new \InvalidArgumentException('non-nullable string_uri cannot be null');
        }
        $this->container['string_uri'] = $string_uri;

        return $this;
    }

    /**
     * Gets string_uuid
     *
     * @return string|null
     */
    public function getStringUuid()
    {
        return $this->container['string_uuid'];
    }

    /**
     * Sets string_uuid
     *
     * @param string|null $string_uuid Property name's description (type is string, format is uuid)
     *
     * @return self
     */
    public function setStringUuid($string_uuid)
    {
        if (is_null($string_uuid)) {
            throw new \InvalidArgumentException('non-nullable string_uuid cannot be null');
        }
        $this->container['string_uuid'] = $string_uuid;

        return $this;
    }

    /**
     * Gets number_property
     *
     * @return float|null
     */
    public function getNumberProperty()
    {
        return $this->container['number_property'];
    }

    /**
     * Sets number_property
     *
     * @param float|null $number_property Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberProperty($number_property)
    {
        if (is_null($number_property)) {
            throw new \InvalidArgumentException('non-nullable number_property cannot be null');
        }
        $this->container['number_property'] = $number_property;

        return $this;
    }

    /**
     * Gets number_float
     *
     * @return float|null
     */
    public function getNumberFloat()
    {
        return $this->container['number_float'];
    }

    /**
     * Sets number_float
     *
     * @param float|null $number_float Property name's description (type is number, format is float)
     *
     * @return self
     */
    public function setNumberFloat($number_float)
    {
        if (is_null($number_float)) {
            throw new \InvalidArgumentException('non-nullable number_float cannot be null');
        }
        $this->container['number_float'] = $number_float;

        return $this;
    }

    /**
     * Gets number_double
     *
     * @return float|null
     */
    public function getNumberDouble()
    {
        return $this->container['number_double'];
    }

    /**
     * Sets number_double
     *
     * @param float|null $number_double Property name's description (type is number, format is double)
     *
     * @return self
     */
    public function setNumberDouble($number_double)
    {
        if (is_null($number_double)) {
            throw new \InvalidArgumentException('non-nullable number_double cannot be null');
        }
        $this->container['number_double'] = $number_double;

        return $this;
    }

    /**
     * Gets number_greater_than_or_equals
     *
     * @return float|null
     */
    public function getNumberGreaterThanOrEquals()
    {
        return $this->container['number_greater_than_or_equals'];
    }

    /**
     * Sets number_greater_than_or_equals
     *
     * @param float|null $number_greater_than_or_equals Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberGreaterThanOrEquals($number_greater_than_or_equals)
    {
        if (is_null($number_greater_than_or_equals)) {
            throw new \InvalidArgumentException('non-nullable number_greater_than_or_equals cannot be null');
        }

        if (($number_greater_than_or_equals < 5)) {
            throw new \InvalidArgumentException('invalid value for $number_greater_than_or_equals when calling Schema., must be bigger than or equal to 5.');
        }

        $this->container['number_greater_than_or_equals'] = $number_greater_than_or_equals;

        return $this;
    }

    /**
     * Gets number_greater_than
     *
     * @return float|null
     */
    public function getNumberGreaterThan()
    {
        return $this->container['number_greater_than'];
    }

    /**
     * Sets number_greater_than
     *
     * @param float|null $number_greater_than Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberGreaterThan($number_greater_than)
    {
        if (is_null($number_greater_than)) {
            throw new \InvalidArgumentException('non-nullable number_greater_than cannot be null');
        }
        $this->container['number_greater_than'] = $number_greater_than;

        return $this;
    }

    /**
     * Gets number_less_than
     *
     * @return float|null
     */
    public function getNumberLessThan()
    {
        return $this->container['number_less_than'];
    }

    /**
     * Sets number_less_than
     *
     * @param float|null $number_less_than Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberLessThan($number_less_than)
    {
        if (is_null($number_less_than)) {
            throw new \InvalidArgumentException('non-nullable number_less_than cannot be null');
        }
        $this->container['number_less_than'] = $number_less_than;

        return $this;
    }

    /**
     * Gets number_less_than_or_equals
     *
     * @return float|null
     */
    public function getNumberLessThanOrEquals()
    {
        return $this->container['number_less_than_or_equals'];
    }

    /**
     * Sets number_less_than_or_equals
     *
     * @param float|null $number_less_than_or_equals Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberLessThanOrEquals($number_less_than_or_equals)
    {
        if (is_null($number_less_than_or_equals)) {
            throw new \InvalidArgumentException('non-nullable number_less_than_or_equals cannot be null');
        }

        if (($number_less_than_or_equals > 8)) {
            throw new \InvalidArgumentException('invalid value for $number_less_than_or_equals when calling Schema., must be smaller than or equal to 8.');
        }

        $this->container['number_less_than_or_equals'] = $number_less_than_or_equals;

        return $this;
    }

    /**
     * Gets number_range
     *
     * @return float|null
     */
    public function getNumberRange()
    {
        return $this->container['number_range'];
    }

    /**
     * Sets number_range
     *
     * @param float|null $number_range Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberRange($number_range)
    {
        if (is_null($number_range)) {
            throw new \InvalidArgumentException('non-nullable number_range cannot be null');
        }

        if (($number_range > 8)) {
            throw new \InvalidArgumentException('invalid value for $number_range when calling Schema., must be smaller than or equal to 8.');
        }
        if (($number_range < 5)) {
            throw new \InvalidArgumentException('invalid value for $number_range when calling Schema., must be bigger than or equal to 5.');
        }

        $this->container['number_range'] = $number_range;

        return $this;
    }

    /**
     * Gets number_range_exclusive_maximum
     *
     * @return float|null
     */
    public function getNumberRangeExclusiveMaximum()
    {
        return $this->container['number_range_exclusive_maximum'];
    }

    /**
     * Sets number_range_exclusive_maximum
     *
     * @param float|null $number_range_exclusive_maximum Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberRangeExclusiveMaximum($number_range_exclusive_maximum)
    {
        if (is_null($number_range_exclusive_maximum)) {
            throw new \InvalidArgumentException('non-nullable number_range_exclusive_maximum cannot be null');
        }

        if (($number_range_exclusive_maximum < 5)) {
            throw new \InvalidArgumentException('invalid value for $number_range_exclusive_maximum when calling Schema., must be bigger than or equal to 5.');
        }

        $this->container['number_range_exclusive_maximum'] = $number_range_exclusive_maximum;

        return $this;
    }

    /**
     * Gets number_range_exclusive_minimum_and_maximum
     *
     * @return float|null
     */
    public function getNumberRangeExclusiveMinimumAndMaximum()
    {
        return $this->container['number_range_exclusive_minimum_and_maximum'];
    }

    /**
     * Sets number_range_exclusive_minimum_and_maximum
     *
     * @param float|null $number_range_exclusive_minimum_and_maximum Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberRangeExclusiveMinimumAndMaximum($number_range_exclusive_minimum_and_maximum)
    {
        if (is_null($number_range_exclusive_minimum_and_maximum)) {
            throw new \InvalidArgumentException('non-nullable number_range_exclusive_minimum_and_maximum cannot be null');
        }
        $this->container['number_range_exclusive_minimum_and_maximum'] = $number_range_exclusive_minimum_and_maximum;

        return $this;
    }

    /**
     * Gets number_multiple_of
     *
     * @return float|null
     */
    public function getNumberMultipleOf()
    {
        return $this->container['number_multiple_of'];
    }

    /**
     * Sets number_multiple_of
     *
     * @param float|null $number_multiple_of Property name's description (type is number)
     *
     * @return self
     */
    public function setNumberMultipleOf($number_multiple_of)
    {
        if (is_null($number_multiple_of)) {
            throw new \InvalidArgumentException('non-nullable number_multiple_of cannot be null');
        }


        $this->container['number_multiple_of'] = $number_multiple_of;

        return $this;
    }

    /**
     * Gets integer_type
     *
     * @return int|null
     */
    public function getIntegerType()
    {
        return $this->container['integer_type'];
    }

    /**
     * Sets integer_type
     *
     * @param int|null $integer_type Property name's description (type is integer)
     *
     * @return self
     */
    public function setIntegerType($integer_type)
    {
        if (is_null($integer_type)) {
            throw new \InvalidArgumentException('non-nullable integer_type cannot be null');
        }
        $this->container['integer_type'] = $integer_type;

        return $this;
    }

    /**
     * Gets integer32bit
     *
     * @return int|null
     */
    public function getInteger32bit()
    {
        return $this->container['integer32bit'];
    }

    /**
     * Sets integer32bit
     *
     * @param int|null $integer32bit Property name's description (type is integer, format is int32)
     *
     * @return self
     */
    public function setInteger32bit($integer32bit)
    {
        if (is_null($integer32bit)) {
            throw new \InvalidArgumentException('non-nullable integer32bit cannot be null');
        }
        $this->container['integer32bit'] = $integer32bit;

        return $this;
    }

    /**
     * Gets integer64bit
     *
     * @return int|null
     */
    public function getInteger64bit()
    {
        return $this->container['integer64bit'];
    }

    /**
     * Sets integer64bit
     *
     * @param int|null $integer64bit Property name's description (type is integer, format is int64)
     *
     * @return self
     */
    public function setInteger64bit($integer64bit)
    {
        if (is_null($integer64bit)) {
            throw new \InvalidArgumentException('non-nullable integer64bit cannot be null');
        }
        $this->container['integer64bit'] = $integer64bit;

        return $this;
    }

    /**
     * Gets boolean_property
     *
     * @return bool|null
     */
    public function getBooleanProperty()
    {
        return $this->container['boolean_property'];
    }

    /**
     * Sets boolean_property
     *
     * @param bool|null $boolean_property Property name's description (type is boolean)
     *
     * @return self
     */
    public function setBooleanProperty($boolean_property)
    {
        if (is_null($boolean_property)) {
            throw new \InvalidArgumentException('non-nullable boolean_property cannot be null');
        }
        $this->container['boolean_property'] = $boolean_property;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


